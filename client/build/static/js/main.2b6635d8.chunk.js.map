{"version":3,"sources":["actions/index.js","actions/types.js","components/Payments.js","components/Header.js","components/Landing.js","components/App.js","reducers/index.js","reducers/authReducer.js","index.js"],"names":["fetchUser","dispatch","a","axios","get","user","type","payload","data","handleToken","token","post","res","Payments","description","amount","name","billingAddress","props","stripeKey","process","className","Component","connect","actions","Header","this","auth","href","key","style","margin","credits","to","id","renderContent","Landing","textAlign","Dashboard","SurveyNew","App","path","exact","component","combineReducers","state","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDom","render","document","querySelector","console","log"],"mappings":"gZAGaA,EAAY,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEACVC,IAAMC,IAAI,qBADA,OACvBC,EADuB,OAE7BJ,EAAS,CAAEK,KCLa,aDKKC,QAASF,EAAKG,OAFd,2CAAN,uDAKZC,EAAc,SAAAC,GAAK,8CAAI,WAAMT,GAAN,eAAAC,EAAA,sEAChBC,IAAMQ,KAAK,cAAeD,GADV,OAC5BE,EAD4B,OAElCX,EAAS,CAAEK,KCVa,aDUKC,QAASK,EAAIJ,OAFR,2CAAJ,uDEH1BK,E,uKACM,IAAD,OAEP,OACE,kBAAC,IAAD,CACEC,YAAY,mBACZC,OAAQ,IACRC,KAAK,OACLC,gBAAgB,EAChBP,MAAO,SAAAA,GAAK,OAAI,EAAKQ,MAAMT,YAAYC,IACvCS,UAAWC,8CAEX,4BAAQC,UAAU,OAAlB,oB,GAZeC,aAkBRC,cAAQ,KAAMC,EAAdD,CAAuBV,GCnBhCY,E,8KAEF,OAAQC,KAAKR,MAAMS,MACjB,KAAK,KACH,OACF,KAAK,EACH,OACE,4BACE,uBAAGC,KAAK,gBAAR,uBAGN,QACE,MAAO,CACL,wBAAIC,IAAI,YACN,kBAAC,EAAD,OAEF,wBAAIA,IAAI,UAAUC,MAAO,CAAEC,OAAQ,WAAnC,YACYL,KAAKR,MAAMS,KAAKK,SAE5B,wBAAIH,IAAI,UACN,uBAAGD,KAAK,eAAR,e,+BAMR,OACE,6BACE,yBAAKP,UAAU,eACb,kBAAC,IAAD,CAAMY,GAAIP,KAAKR,MAAMS,KAAO,WAAa,IAAKN,UAAU,cAAxD,QAGA,wBAAIa,GAAG,aAAab,UAAU,8BAC3BK,KAAKS,uB,GAjCGb,aA2CNC,mBAHf,YACE,MAAO,CAAEI,KADwB,EAARA,QAGZJ,CAAyBE,GCrCzBW,EARC,WACd,OACE,yBAAKN,MAAO,CAAEO,UAAW,WACvB,oCADF,iCCEEC,EAAY,kBAAM,0CAClBC,EAAY,kBAAM,2CAClBC,E,kLAKFd,KAAKR,MAAMlB,c,+BAIX,OACE,6BACE,kBAAC,IAAD,KACE,yBAAKqB,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOoB,KAAK,IAAIC,OAAK,EAACC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,OAAK,EAACC,UAAWL,IACxC,kBAAC,IAAD,CAAOG,KAAK,eAAeC,OAAK,EAACC,UAAWJ,W,GAhBtCjB,aAuBHC,cAAQ,KAAMC,EAAdD,CAAuBiB,G,QC5BvBI,cAAgB,CAC7BjB,KCHa,WAAgC,IAAvBkB,EAAsB,uDAAd,KAAMC,EAAQ,uCAE5C,OAAQA,EAAOxC,MACb,INJsB,aMKpB,OAAOwC,EAAOvC,UAAW,EAC3B,QACE,OAAOsC,M,QCCPE,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAExDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,UAGzBC,QAAQC,IAAI,cAAerC,8CAC3BoC,QAAQC,IAAI,SAAUrC,gB","file":"static/js/main.2b6635d8.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { FETCH_USER } from \"./types\";\r\n\r\nexport const fetchUser = () => async dispatch => {\r\n  const user = await axios.get(\"/api/current_user\");\r\n  dispatch({ type: FETCH_USER, payload: user.data });\r\n};\r\n\r\nexport const handleToken = token => async dispatch => {\r\n  const res = await axios.post(\"/api/stripe\", token);\r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n};\r\n","export const FETCH_USER = \"fetch_user\";\r\n","import React, { Component } from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions\";\r\n\r\nclass Payments extends Component {\r\n  render() {\r\n    // debugger;\r\n    return (\r\n      <StripeCheckout\r\n        description=\"5$ for 5 credits\"\r\n        amount={500}\r\n        name=\"test\"\r\n        billingAddress={true}\r\n        token={token => this.props.handleToken(token)}\r\n        stripeKey={process.env.REACT_APP_STRIPE_KEY}\r\n      >\r\n        <button className=\"btn\">Add Credits</button>\r\n      </StripeCheckout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, actions)(Payments);\r\n\r\n// us cents->1$=100cents\r\n// token expects callback function which will be recived after sucessful\r\n// or failed transaction\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Payments from \"./Payments\";\r\nclass Header extends Component {\r\n  renderContent() {\r\n    switch (this.props.auth) {\r\n      case null:\r\n        return;\r\n      case false:\r\n        return (\r\n          <li>\r\n            <a href=\"/auth/google\">SignIN with Google</a>\r\n          </li>\r\n        );\r\n      default:\r\n        return [\r\n          <li key=\"payments\">\r\n            <Payments />\r\n          </li>,\r\n          <li key=\"credits\" style={{ margin: \"0 10px\" }}>\r\n            Credits: {this.props.auth.credits}\r\n          </li>,\r\n          <li key=\"logout\">\r\n            <a href=\"/api/logout\">Logout</a>\r\n          </li>\r\n        ];\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"nav-wrapper\">\r\n          <Link to={this.props.auth ? \"/surveys\" : \"/\"} className=\"brand-logo\">\r\n            Ezio\r\n          </Link>\r\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n            {this.renderContent()}\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps({ auth }) {\r\n  return { auth };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n\r\n/*\r\nto hook up the component to redux store we import connect then map state to props function \r\n*/\r\n","import React from \"react\";\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h1>EZIO</h1>\r\n      Collect feedbacks from users\r\n    </div>\r\n  );\r\n};\r\nexport default Landing;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Landing from \"./Landing\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions\";\r\nconst Dashboard = () => <h2>Dashboard</h2>;\r\nconst SurveyNew = () => <h2>Survey New</h2>;\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // lifecycle method and wire his class to get\r\n    // updates from redux and call action creators\r\n\r\n    this.props.fetchUser();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BrowserRouter>\r\n          <div className=\"container\">\r\n            <Header />\r\n            <Route path=\"/\" exact component={Landing} />\r\n            <Route path=\"/surveys\" exact component={Dashboard} />\r\n            <Route path=\"/surveys/new\" exact component={SurveyNew} />\r\n          </div>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(null, actions)(App);\r\n/*\r\nconnect() connects this component to redux store\r\ntake 2 arguments which are functions \r\n1. mapPropsToState update props to new global state\r\n2. mapDispatchTostate returns functions which call dispatch to make changes in global state\r\n\r\nredux calls these two functions through connect and then automatically add them to the props of the component \r\npassed as argument\r\n\r\n*/\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nexport default combineReducers({\r\n  auth: authReducer\r\n});\r\n","import { FETCH_USER } from \"../actions/types\";\r\nexport default function(state = null, action) {\r\n  //console.log(action);\r\n  switch (action.type) {\r\n    case FETCH_USER:\r\n      return action.payload || false;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n/*\r\nFETCH_USER can be null - waiting for response or some payload user logged\r\nin or false user not logged in\r\n*/\r\n","import React from \"react\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport reducers from \"./reducers\";\r\nimport reduxThunk from \"redux-thunk\";\r\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\r\n\r\nReactDom.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n\r\nconsole.log(\"stripe key \", process.env.REACT_APP_STRIPE_KEY);\r\nconsole.log(\"env is\", process.env.NODE_ENV);\r\n"],"sourceRoot":""}